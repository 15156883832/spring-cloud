server:
  port: 8084 #指定启动端口号
  servlet:
    context-path: /order
spring:
  mvc:
    view:
      prefix: /  #默认是src/main/webapp 所以在这里就没配置了
      suffix: .jsp
  #application:
  #name: test-service
  profiles:
    active: dev  #默认环境（开发环境）
  datasource:
    #type: com.alibaba.druid.pool.DruidDataSource   #这里是配置druid连接池，以下都是druid的配置信息
    jdbc-url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 1 #连接初始值，连接池启动时创建的连接数量的初始值
    maxWait: 60000
    minIdle: 1 #最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x' #验证数据库连接查询语句的有效性,此处时mysql得配置，Oracle:select 1 from dual
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true  #是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存
    maxOpenPreparedStatements: 20

  redis:
    database: 0
    host: localhost
    port: 6379
    password:
    timeout: 10000 #连接超时时间 1秒
    jedis:
      pool:
        max-active: 8 #连接池最大连接数 使用负值表示没有限制
        max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 #连接池中的最大空闲连接
        min-idle: 0 #连接池中的最小空闲连接

  application:
    name: order

eureka:
  instance:
    prefer-ip-address: true
    hostname: localhost
    lease-renewal-interval-in-seconds: 20  #eureka客户需要多长时间发送心跳给eureka服务器，表明它仍然活着,默认为30 秒
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: http://localhost:8771/eureka-server/eureka/ #,http://user:123456@localhost:8772/eureka-server-one/eureka/
    registry-fetch-interval-seconds: 30 # 从eureka服务器注册表中获取注册信息的时间间隔（s），默认为30秒



#Actuator 管理参数配置
management:
  endpoints:
    web:
      exposure:
        # 这里用* 代表暴露所有端点只是为了观察效果，实际中按照需进行端点暴露
        include: "*"
  endpoint:
    health:
      # 详细信息显示给所有用户。
      show-details: always
  health:
    status:
      http-mapping:
        # 自定义健康检查返回状态码对应的http状态码
        FATAL:  503


